name: Verify that setting secret works with a GitHub key

on:
  push:
    branches:
      - main

jobs:
  job0_update_secret_test:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          npm i libsodium-wrappers
          echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV
          
      - name: Get repository files - probably do not need it
        uses: actions/checkout@v2
        
      - name: Assign a new value to the secret
        uses: actions/github-script@v6
        env:
          REPOB_V0_test: '${{ secrets.REPOB_V0_test }}'
        with:
          result-encoding: string
          github-token: ${{ secrets.REPOB_V0_test }}
          script: |
            const secret_name = 'REPOB_V0_test';
            
            // Get id information about repository secret
            const publicKey_str = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            
            // Encode the key
            const sodium = require('libsodium-wrappers')

            // Way 0: GitHub example
            sodium.ready.then(() => {
              // Convert the secret and key to a Uint8Array.
              let binkey = sodium.from_base64(publicKey_str, sodium.base64_variants.ORIGINAL)
              let binsec = sodium.from_string(secret_name)
            
              // Encrypt the secret using libsodium
              let encBytes = sodium.crypto_box_seal(binsec, binkey)
            
              // Convert the encrypted Uint8Array to Base64
              let encryptedToken_base64 = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
            
              // Print the output
              console.log(output);
            });

            // Re-assign the new_secret_value to the repository secret
            await github.rest.actions.createOrUpdateRepoSecret({
                owner: context.repo.owner,
                repo: context.repo.repo,
                secret_name: secret_name,
                encrypted_value: encryptedToken,
                key_id: publicKey_str.data.key_id,
              });

  job1_read_secret_test:
    needs: job0_update_secret_test
    runs-on: ubuntu-latest
    
    steps:
      - name: Test if a new_secret_value was created
        uses: actions/github-script@v6
        env:
          REPOB_V0_test: '${{ secrets.REPOB_V0_test }}'
        with:
          github-token: ${{ secrets.REPOB_V0_test }}
          script: |
            const { REPOB_V0_test } = process.env;
            const secret_name = `${REPOB_V0_test}`;
            console.log("Verify that new value was set:", secret_name);
